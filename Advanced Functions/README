1. Write a function that calculates the area and the volume of a figure, which is defined by its coordinates
(x, y, z).
area()
function area() {
return Math.abs(this.x * this.y);
};
vol()
function vol() {
return Math.abs(this.x * this.y * this.z);
};
solve()
function solve(area, vol, input) {
//ToDo....
}
Input
You will receive 3 parameters - the functions area and vol and a string, which contains the figures' coordinates.
For more information check the examples.
Output
The output should be returned as an array of objects. Each object has two properties: the figure's area and volume.
[
{ area: ${area1}, volume: ${volume1} },
{ area: ${area2}, volume: ${volume2} },
. . .
]

2. Add
Write a program that keeps a number inside its context and returns a new function that adds a given number to the
previous one.
Input
Check the examples below to see how your code will be executed.
Output
Your function should return the final result.

3. Currency Format
Write a higher-order function createFormatter that fixes some of the parameters of another function. Your
program will receive four parameters: three values and a function that takes 4 parameters and returns a
formatted string (a monetary value with currency symbol).
Your task is to return a partially applied function, based on the input function that has its first three parameters
fixed and only takes one parameter.
You will receive the following function:
currencyFormatter
function currencyFormatter(separator, symbol, symbolFirst, value) {
let result = Math.trunc(value) + separator;
result += value.toFixed(2).substr(-2,2);
if (symbolFirst) return symbol + ' ' + result;
else return result + ' ' + symbol;
}
Receive and set the following parameters to fixed values:
separator
symbol
symbolFirst
The final parameter value is the one that the returned function must receive.
Input
You will receive four parameters:
 separator (string)
 symbol (string)
 symbolFirst (Boolean)
 formatter (function)
Output
You need to return a function that takes one parameter - value

4. Filter Employees
Write a program that filters the employees of your company. You should print the result in a specific format. You will
receive 2 parameters (data, criteria). You should parse the input, find all employees that fulfill the criteria, and
print them.
© SoftUni – https://softuni.org. Copyrighted document. Unauthorized copy, reproduction or use is not permitted.
Follow us: Page 4 of 7
Input
You will receive a string with all the employees, and criteria by which you should sort the employees.
Output
The output should be printed on the console.
For more information check the examples

5. Command Processor
Write a program that keeps a string inside its context and can execute different commands that modify or print the
string on the console.
append(string) - append the given string at the end of the internal string
removeStart(n) - remove the first n characters from the string, n is an integer
removeEnd(n) - remove the last n characters from the string, n is an integer
print - print the stored string on the console
Input
Check the examples below to see how your code will be executed.
Output
Whenever you receive the command print, the output should be printed on the console.

6. List Processor
Using a closure, create an inner object to process list commands. The commands supported should be the following:
 add <string> - adds the following string in an inner collection.
 remove <string> - removes all occurrences of the supplied <string> from the inner collection.
 print - prints all elements of the inner collection joined by ",".
Input
The input will come as an array of strings - each string represents a command to be executed from the command
execution engine.
Output
For every print command - you should print on the console the inner collection joined by ",".

7. Cars
Write a closure that can create and modify objects. All created objects should be kept and be accessible by name.
You should support the following functionality:
 create <name> - creates an object with the supplied <name>
 create <name> inherits <parentName> - creates an object with the given <name>, that inherits
from the parent object with the <parentName>
© SoftUni – https://softuni.org. Copyrighted document. Unauthorized copy, reproduction or use is not permitted.
Follow us: Page 7 of 7
 set <name> <key> <value> - sets the property with key equal to <key> to <value> in the object with
the supplied <name>.
 print <name> - prints the object with the supplied <name> in the format
"<key1>:<value1>,<key2>:<value2>..." - the printing should also print all inherited properties from
parent objects. Inherited properties should come after own properties.
Input
The input will come as an array of strings - each string represents a command to be executed from your closure.
Output
For every print command - you should print on the console all properties of the object in the above-mentioned
format.
Constraints
 All commands will always be valid, there will be no nonexistent or incorrect input