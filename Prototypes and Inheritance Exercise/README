1.	Array Extension
Extend the built-in Array object with additional functionality. Implement the following functionality:
•	last() - returns the last element of the array
•	skip(n) - returns a new array which includes all original elements, except the first n elements; n is a Number parameter
•	take(n) - returns a new array containing the first n elements from the original array; n is a Number parameter
•	sum() - returns a sum of all array elements
•	average() - returns the average of all array elements
Input / Output
Input for functions that expect it will be passed as valid parameters. Output from functions should be their return value.
Constraints
Structure your code as an IIFE.

2. String Extension
Extend the built-in String object with additional functionality. Implement the following functions:
•	ensureStart(str) – if the current string doesn't start with the str parameter, return a new string in which str parameter appended to the beginning of the current string, otherwise returns the original string
•	ensureEnd(str) – if the current string doesn't end with str parameter, return a new string in which str parameter appended to the end of the current string, otherwise returns the original string
•	isEmpty() - return true if the string is empty and false otherwise
•	truncate(n) – returns the string truncated to n characters by removing words and appends an ellipsis (three periods) to the end. If a string is less than n characters long, return the same string. If it is longer, split the string where a space occurs and append an ellipsis to it so that the total length is less than or equal to n. If no space occurs anywhere in the string, return n - 3 characters and an ellipsis. If n is less than 4, return n amount of periods.
•	format(string, …params) - static method to replace placeholders with parameters. A placeholder is a number surrounded by curly braces. If parameter index cannot be found for a certain placeholder, do not modify it. Note static methods are attached to the String object instead of its prototype. See the examples for more info.
Note strings are immutable, so your functions will return new strings as a result.
Input / Output
Your main code should be structured as an IIFE without input or output - it should modify the existing String prototype instead.
Input and output of the extension functions should be as described above.


3. Extensible Object
Create an object that can clone the functionality of another object into itself. Implement an extend(template) function that would copy all of the properties of the template to the parent object and if the property is a function, add it to the object’s prototype instead.
Input / Output
Your code should return the extensible object instance. The extend() function of your object will receive a valid object as an input parameter and has no output.

4. Balloons
You have been tasked to create several classes for balloons.
Implement a class Balloon, which is initialized with a color (String) and gasWeight (Number). These two arguments should be public members.
Implement another class PartyBalloon, which inherits the Balloon class and is initialized with 2 additional parameters - ribbonColor (String) and ribbonLength (Number).
The PartyBalloon class should have a property ribbon, which is an object with color and length - the ones given upon initialization. The ribbon property should have a getter.
Implement another class BirthdayBalloon, which inherits the PartyBalloon class and is initialized with 1 extra parameter - text (String). The text should be a property and should have a getter.

5. People
Define several classes, that represent a company’s employee records. Every employee has a name and age, a salary, and a list of tasks, while every position has specific properties not present in the others. Place all common functionality in a parent abstract class. Follow the diagram below:
 
Every position has different tasks. In addition to all common properties, the manager position has a dividend he can collect along with his salary.
All employees have a work() function that when called cycles through the list of responsibilities for that position and prints the current one. When all tasks have been printed, the list starts over from the beginning. Employees can also collect salary, which outputs the amount, plus any bonuses.
Your program needs to expose a module, containing the three classes Employee, Junior, Senior, and Manager. The property's name and age are set through the constructor, while the salary and a manager’s dividend are initially set to zero and can be changed later. The list of tasks is filled by each position. The resulting objects also expose the functions work() and collectSalary(). When work() is called, one of the following lines is printed on the console, depending on the current task in the list:
"{employee name} is working on a simple task."
"{employee name} is working on a complicated task."
"{employee name} is taking time off work."
"{employee name} is supervising junior workers."
"{employee name} scheduled a meeting."
"{employee name} is preparing a quarterly report."
And when collectSalary() is called, print the following:
"{employee name} received {salary + bonuses} this month."
Input / Output
Any input will be passed as valid arguments, where applicable. Print any output that is required to the console as a string.
Submit your code as a revealing module, containing the four classes. Any definitions need to be named exactly as described above.

6. Posts
You need to create several classes for Posts.
Implement the following classes:
•	Post, which is initialized with the title (String) and content (String)
o	The 2 arguments should be public members
o	The Post class should also have toString() function which returns the following result:
"Post: {postTitle}"
"Content: {postContent}"
•	SocialMediaPost, which inherits the Post class and should be initialized with 2 additional arguments - likes (Number) and dislikes (Number). The class should hold:
o	comments(Strings) -  an array of strings
o	addComment(comment)- a function, which adds comments to that array
o	The class should extend the toString() function of the Post class, and should return the following result:
"Post: {postTitle}"
"Content: {postContent}"
"Rating: {postLikes - postDislikes}"
"Comments:"
" * {comment1}"
" * {comment2}"
. . .
In case there are no comments, return information only about the title, content, and rating of the post.
•	BlogPost, which inherits the Post class:
o	The BlogPost class should be initialized with 1 additional argument - views(Number).
o	The BlogPost class should hold 
- view() - which increments the views of the object with 1, every time it is called. The function should return the object so that chaining is supported.
o	The BlogPost class should extend the toString() function of the Post class, and should return the following result:
"Post: {postTitle}"
"Content: {postContent}"
"Views: {postViews}"
